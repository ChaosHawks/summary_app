# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# GUI REQUIRED IMPORTS
from http.client import InvalidURL
from re import X
from signal import signal
from sqlite3 import connect, sqlite_version
from subprocess import call
from turtle import onclick, textinput, xcor
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton, QApplication, QMessageBox, QWidget, QInputDialog, QFileDialog, QLabel

# URL validation imports
import validators, requests

# Imports for processing.py
from processing import summariseText, summariseURL, summariseFile

import string

class Ui_MainWindow(QWidget):
    def Summarise(self):
        
        if(self.tbOriginal.toPlainText() == ""): # Check for text in input (if empty)
            # ERROR BOX FOR EMPTY INPUT
            errorBox = QMessageBox() # Create messagebox instant
            errorBox.setWindowTitle("Empty Input") # messagebox title
            errorBox.setText("Please add some text to the original text input") # messagebox text
            errorBox.setIcon(QMessageBox.Critical) # add message box icon
            x = errorBox.exec_()  # this shows messagebox
        else:
            testString = str(self.tbOriginal.toPlainText())
            testString = testString.replace(" ", "").replace(".", "").replace("-", "")

            if str(testString).isnumeric():
                    # ERROR BOX FOR NUMERIC INPUT
                    errorBox = QMessageBox() # Create messagebox instant
                    errorBox.setWindowTitle("Number Input") # messagebox title
                    errorBox.setText("Please ensure your input is not completely numbers as this can not be summarised") # messagebox text
                    errorBox.setIcon(QMessageBox.Critical) # add message box icon
                    x = errorBox.exec_()  # this shows messagebox
            else:
               sSummarised = summariseText(self.tbOriginal.toPlainText()) # pass original text and set summarised
               self.tbSummarized.setPlainText(str(sSummarised)) # set textbox to summarised
    
    def errorTest(self):
        # MESSAGEBOX FOR INVALID URL
        errorBox = QMessageBox() # Create messagebox instant
        errorBox.setWindowTitle("Invalid Input") # messagebox title
        errorBox.setText("Please Ensure your URL is valid") # messagebox text
        errorBox.setIcon(QMessageBox.Critical) # add message box icon
        x = errorBox.exec_()  # this shows messagebox

    def inputURL(self):
        text, ok = QInputDialog.getText(self, "URL Input", "Please input a URL") # 1st URL validation
        if ok: # If valid site
            if validators.url(text) == True: # If valid site
                try: # Try/catch to counter too many try error 
                    response = requests.get(text) # 2nd URL validation
                    if response.status_code == 200: # If valid site
                        sSummarised = summariseURL(text) # Pass URL validation
                        self.tbSummarized.setPlainText(str(sSummarised)) # Set output text box
                    else:
                        self.errorTest() # Display URL error
                except requests.exceptions.RequestException as e:  # This is the correct syntax
                    self.errorTest() # Display URL error
            else:
                self.errorTest() # Display URL error
        
    def getFile(self):
        # OPENFILEDIALOG FOR FILE SELECTION
        # fName = QFileDialog.getOpenFileName(self, "Input File", "", "Text Files (*.txt);;Word Files (*.docx)") # Removed
        fName = QFileDialog.getOpenFileName(self, "Input File", "", "Text Files (*.txt)") # Get file - returns tuple

        # IF FILE SELECTED CHECK
        if fName:
            # READ FILE TEXT, JOIN INTO ONE STRING, AND STRIP OF SPACES AND PUNCTUATION
            with open(fName[0]) as f:
                fileText = f.readlines()
            fileString = ''.join(fileText)
            fileString = fileString.replace(" ", "")
            testString = fileString.translate(str.maketrans('', '', string.punctuation))

            if testString == "":
                # ERROR BOX FOR EMPTY INPUT
                errorBox = QMessageBox() # Create messagebox instant
                errorBox.setWindowTitle("Empty Input") # messagebox title
                errorBox.setText("Please ensure the file contains text") # messagebox text
                errorBox.setIcon(QMessageBox.Critical) # add message box icon
                x = errorBox.exec_()  # this shows messagebox
            else:
                if str(testString).isnumeric():
                        # ERROR BOX FOR NUMERIC INPUT
                        errorBox = QMessageBox() # Create messagebox instant
                        errorBox.setWindowTitle("Number Input") # messagebox title
                        errorBox.setText("Please ensure your input is not completely numbers as this can not be summarised") # messagebox text
                        errorBox.setIcon(QMessageBox.Critical) # add message box icon
                        x = errorBox.exec_()  # this shows messagebox
                else:
                    sOriginal, sSummarised = summariseFile(fName[0]) # Summarise text in file (Pass file address)

                    self.tbOriginal.setPlainText("")

                    for x in sOriginal:
                        self.tbOriginal.appendPlainText(str(x)) # Set input to original

                    self.tbSummarized.setPlainText(str(sSummarised)) # Set output to summary
            
    def downloadSummary(self):
        if self.tbSummarized.toPlainText() != "": # Check output has text
            with open('summary.txt', 'w') as f: # Open txt file to write
                f.write(str(self.tbSummarized.toPlainText())) # Write to file
            
            # MESSAGE BOX FOR DOWNLOAD CONFIRMATION
            downloaded = QMessageBox() # Create messagebox instant
            downloaded.setWindowTitle("Downloaded") # messagebox title
            downloaded.setText("Your file is downloaded") # messagebox text
            x = downloaded.exec_()  # this shows messagebox
        else:
            # ERROR BOX FOR DOWNLOAD
            errorBox = QMessageBox() # Create messagebox instant
            errorBox.setWindowTitle("Invalid Input") # messagebox title
            errorBox.setText("Please ensure you have summarised some text") # messagebox text
            errorBox.setIcon(QMessageBox.Critical) # add message box icon
            x = errorBox.exec_()  # this shows messagebox

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1155, 847)
        MainWindow.setFixedSize(1155, 847)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.picHeader = QtWidgets.QLabel(self.centralwidget)
        self.picHeader.setGeometry(QtCore.QRect(0, 0, 1201, 121))
        self.picHeader.setMouseTracking(False)
        self.picHeader.setAutoFillBackground(False)
        self.picHeader.setStyleSheet("background-image: url(:/images/resources/headerImage.jpeg);")
        self.picHeader.setText("")
        self.picHeader.setScaledContents(False)
        self.picHeader.setWordWrap(False)
        self.picHeader.setObjectName("picHeader")
        self.lblHeader = QtWidgets.QLabel(self.centralwidget)
        self.lblHeader.setGeometry(QtCore.QRect(30, 30, 481, 51))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(24)
        self.lblHeader.setFont(font)
        self.lblHeader.setStyleSheet("background-color: rgb(221, 221, 221);")
        self.lblHeader.setObjectName("lblHeader")
        self.tbOriginal = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.tbOriginal.setGeometry(QtCore.QRect(10, 160, 411, 621))
        self.tbOriginal.setObjectName("tbOriginal")
        self.tbSummarized = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.tbSummarized.setGeometry(QtCore.QRect(660, 160, 441, 621))
        self.tbSummarized.setObjectName("tbSummarized")
        self.lblOriginal = QtWidgets.QLabel(self.centralwidget)
        self.lblOriginal.setGeometry(QtCore.QRect(10, 130, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.lblOriginal.setFont(font)
        self.lblOriginal.setStyleSheet("background-color: rgb(221, 221, 221);")
        self.lblOriginal.setObjectName("lblOriginal")
        self.lblSummarized = QtWidgets.QLabel(self.centralwidget)
        self.lblSummarized.setGeometry(QtCore.QRect(660, 130, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.lblSummarized.setFont(font)
        self.lblSummarized.setStyleSheet("background-color: rgb(221, 221, 221);")
        self.lblSummarized.setObjectName("lblSummarized")
        self.btnSummarize = QtWidgets.QPushButton(self.centralwidget)
        self.btnSummarize.setGeometry(QtCore.QRect(470, 160, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.btnSummarize.setFont(font)
        self.btnSummarize.setObjectName("btnSummarize")
        self.btnFile = QtWidgets.QPushButton(self.centralwidget)
        self.btnFile.setGeometry(QtCore.QRect(470, 230, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.btnFile.setFont(font)
        self.btnFile.setStyleSheet("")
        self.btnFile.setObjectName("btnFile")
        self.btnURL = QtWidgets.QPushButton(self.centralwidget)
        self.btnURL.setGeometry(QtCore.QRect(470, 310, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.btnURL.setFont(font)
        self.btnURL.setStyleSheet("")
        self.btnURL.setObjectName("btnURL")
        self.btnDownload = QtWidgets.QPushButton(self.centralwidget)
        self.btnDownload.setGeometry(QtCore.QRect(440, 490, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.btnDownload.setFont(font)
        self.btnDownload.setStyleSheet("")
        self.btnDownload.setObjectName("btnDownload")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1189, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Set button tooltips
        self.btnSummarize.setToolTip("Summarise inputed text")
        self.btnFile.setToolTip("Upload file for summary")
        self.btnURL.setToolTip("Submit URL for summary")
        self.btnDownload.setToolTip("Download summary as .txt")

        # Button Clicks
        self.btnSummarize.clicked.connect(self.Summarise)
        self.btnFile.clicked.connect(self.getFile)
        self.btnURL.clicked.connect(self.inputURL)
        self.btnDownload.clicked.connect(self.downloadSummary)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "News Summarisation Applicaiton"))
        self.lblHeader.setText(_translate("MainWindow", "News Summarisation"))
        self.lblOriginal.setText(_translate("MainWindow", "Original Text"))
        self.lblSummarized.setText(_translate("MainWindow", "Summarized Text"))
        self.btnSummarize.setText(_translate("MainWindow", "Summarise"))
        self.btnFile.setText(_translate("MainWindow", "File Upload"))
        self.btnURL.setText(_translate("MainWindow", "URL Upload"))
        self.btnDownload.setText(_translate("MainWindow", "Download Summary"))
import resource_rc

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())